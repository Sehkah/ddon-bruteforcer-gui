plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin'
    id 'org.beryx.jlink'
    id 'org.javamodularity.moduleplugin'
}

ext {
    junitVersion = '5.8.2'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    applicationDefaultJvmArgs = ['-Dfile.encoding=UTF-8', '-Djna.library.path=lib/win32-x86-64']
    mainModule = 'org.sehkah.ddonbruteforcergui'
    mainClass = 'org.sehkah.ddonbruteforcergui.Main'
}

javafx {
    version = '17.0.1'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    // https://mvnrepository.com/artifact/net.java.dev.jna/jna
    implementation group: 'net.java.dev.jna', name: 'jna', version: '5.10.0'
    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.1'
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core/2.17.1
    runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.1'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.13.1'
    // https://mvnrepository.com/artifact/org.kordamp.ikonli/ikonli-javafx
    implementation group: 'org.kordamp.ikonli', name: 'ikonli-javafx', version: '12.3.0'
    // https://mvnrepository.com/artifact/org.kordamp.ikonli/ikonli-bootstrapicons-pack/12.3.0
    runtimeOnly group: 'org.kordamp.ikonli', name: 'ikonli-bootstrapicons-pack', version: '12.3.0'
    // https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.70'

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${junitVersion}"
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-params
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: "${junitVersion}"
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${junitVersion}"
}

test {
    useJUnitPlatform()

    systemProperty('jna.library.path', 'lib/win32-x86-64')
}

jar {
    manifest {
        attributes 'Main-Class': 'org.sehkah.ddonbruteforcergui.Main'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        duplicatesStrategy DuplicatesStrategy.EXCLUDE
    }
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--ignore-signing-information']
//    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    launcher {
        name = rootProject.name
        jvmArgs = ['-Dfile.encoding=UTF-8', '-Djna.library.path=lib/win32-x86-64']
    }

    jpackage {
        jvmArgs = ['-Dfile.encoding=UTF-8', '-Djna.library.path=lib/win32-x86-64']
        skipInstaller = true
        imageOptions += ['--win-console']
        installerOptions += [
                '--vendor', 'Sehkah',
                '--app-version', version
        ]
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            installerOptions += [
                    '--win-per-user-install', '--win-dir-chooser', '--win-menu'
            ]
        }
    }
    forceMerge("jackson", "log4j")
}

jpackage.doLast {
    copy {
        from "lib/win32-x86-64/"
        into "$buildDir/jpackage/$rootProject.name/lib/win32-x86-64"
    }
}

//
//jlinkZip {
//    group = 'distribution'
//    doLast {
//        copy {
//            from "lib/win32-x86-64/SeededXorshift128.dll"
//            into "$imageDir/lib/win32-x86-64"
//        }
//    }
//}

//java {
//    toolchain {
//        languageVersion = JavaLanguageVersion.of(17)
//        vendor = JvmVendorSpec.ADOPTOPENJDK
//    }
//}