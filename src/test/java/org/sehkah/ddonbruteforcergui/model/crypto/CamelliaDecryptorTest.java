package org.sehkah.ddonbruteforcergui.model.crypto;

import org.bouncycastle.util.encoders.Base64;
import org.bouncycastle.util.encoders.Hex;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.nio.charset.StandardCharsets;

import static org.junit.jupiter.api.Assertions.assertEquals;

class CamelliaDecryptorTest {

    /**
     * TODO not reproducible, Server #000000 (1.0.1) C2L_CLIENT_CHALLENGE_REQ
     */
    @Test
    @Disabled
    void decryptStream61Packet1() {
        String packetData = "ATBiAlrMgebRrnynCWspr00v7fxCK1T0yy1tSC8kcBSabG7UYcQbyWX3Vxe1sCPS8NBJnhyY8MK0SCIYLcalFm624lT/IJAv+ACCRQiqb4SMMiX0HsLdj/sI8zfBWc3e66ThW5pcXkGL0K2pyD9vkK91ey/pDPe/hiMtPq5oj4LKBPwJx0IB6bdqFcGnLr4ujnUNdSKreaczszkx1el/jHZIflQ3qudWO80FaGDM3BkeBKV0X/rX9dCCYAUu+8xnhekyzYRi1ROPTwsYnu7J+MZYXXHJa/fppAXHcTApkqrUm82rvooO6BZhaqVNkrxGFx+Vz2We0pXOTouzjcbobxG4mEzVmFr642jQjocfkCtDllRhsv/m1Q03QgcmrZSthXqNywystYdxOcXcA+V0ZtQP";
        byte[] decryptedPacketData = CamelliaDecryptor.decryptPacketData(Base64.decode(packetData), CamelliaConstants.CAMELLIA_DEFAULT_KEY);
        assertEquals("C032FE81CB036A6D9D5C94118F9479AC4C79E2126BF55AB4D2F9CC17D72D8A8F55015CB15F874FAC091D6B40138728959D6F04D10B79865B7E4A247639B9BBA5808A5CF08E84CC097FB08FF0B4C7375FB37ACF27497EE6235CC0D0DF67D81AD4321FE9F75186494C1FB7F3A844E5DDC70522DFE1A4A7329C2BA207A0E5E20A6AEDC5FF3DD05A2F7A455898CC5EBBA6731BA34817BE89BB46E61D5F2D9A254422BB50154EA10624DE30AE657805AC146DF4436C597A1B04F7ABB4295FAB64D7653EE1F18713A8715DD74C6E02C0171DF15BCFC2D696E711F4A89336E8BB09738A608126A407571412A8CFC851678DC540236C8896559A859B8C5383FFBB0463C6783CEA9F4D12A266D976AD9B4F4FAEAA4497BE20D61BFB3AF55CAFF28A12414E470949D11E06BBADE1BEB79BD6C1A0C6",
                Hex.toHexString(decryptedPacketData).toUpperCase());
    }

    /**
     * TODO not reproducible, Client #000000 (1.0.1) C2L_CLIENT_CHALLENGE_REQ
     */
    @Test
    void decryptStream61Packet2() {
        String packetData = "AVCxtHSpIe82o6RZ9Dn/ueLEiXgHEIckhAaO9+xl7wPHHTz2ADQu8BZBDkDzMXP/YD/8subvptifzaAkGOkxZPt1+Pi1356A7Epwt/p194cOK2CQJzyD286oyuLSkWDGs6OSvvg5Nz/HhUuNoGPfanWl+VB6fHLdLivh66ASR9NTAlbDhPwsX2aZ3r1U4a7Ui5dCVMXMV8jQtdnZn7FE4wZuS7xe4suFJeZCG1flU+OO349ldb0OAr/45OzhtAUF4o5aYK/HqHSb30Ucx1+HzeG1S7EX8mGw6qqIjd//wu42yr+Y8FDmJ4Xch6EdJLEmUP6puB3dGj4sLQOB/ZbxG3Wne7ZZeR4Ex/J5ZqtYXdMyDXtazlb2rT93n8f30Z390PdzNLh0C88JoTQYckKpsw49aMB7nkxhkm5vFjKYcwi2svqv5eZP+0u2J4YeDKvij5Q=";
        byte[] decryptedPacketData = CamelliaDecryptor.decryptPacketData(Base64.decode(packetData), CamelliaConstants.CAMELLIA_DEFAULT_KEY);
        assertEquals("452ACCD6F0060975553876CE6E47F5DD205402D99A447AFA85F286EA44B582187119CDAFE5E94AC8F537FB7A254F7EA7D551BE5D8CD24DA533964D8C4BB15103678CC9CD3371E056734D018115D56E2F4A7D6F70B27BCFA987AFABECC56671624F4A5BF999B7C28893597CCEF338B4311A71A2E5A8D51C28BECA6BB938400C6BEA5C54C633084F42AEB1205D40E02A2994180A6E64BC059B37F59E7CA499261007EEA30A7D90027146D7FD8C1085C17CE4A7C52C2CBD750CAB15D7937E5D4B88702C82A69B5E05675C80F7897C8A04994C7458AA6777A4D280F76A99CA3B429ECA16AE5A4FD4A33695B3D62857511BF46DFDBD89962CA9EFF8CCDE65757C6AC5F7B53C90AE7EDE991BDEE329A7AB9FFC84FAF85A3F005FC1CF0AE7591BB8EBE47B1258A559F9DCD3C9734588C1F3477C586917381F4F171F37417B7BC1D09B03972E693E706EBB39A7E91653A008E5AC",
                Hex.toHexString(decryptedPacketData).toUpperCase());
    }

    /**
     * Works Server #000000 (1.0.2) L2C_CLIENT_CHALLENGE_RES
     */
    @Test
    void decryptStream61Packet3() {
        String packetData = "AGDxNvM5IEL0zzv2uc1ted+UYDHeP6hAEv5WOrQKk2EtLT2oCpLHLZ3GQIVVOFiOPg34TtRWwB0JNMK9VGkjXdeeMdyeNBBFkd6gsuVbn4YQFiy60lDxznttS1lIVYRDBlU=";
        String key = "UpJlo7MYHVbxS3Xs7LAx-sptfA5Q3Mw-";
        byte[] decryptedPacketData = CamelliaDecryptor.decryptPacketData(Base64.decode(packetData), key.getBytes(StandardCharsets.UTF_8));
        assertEquals("010000023400000000000000000000000010108979EED698AD50785502CCB988AEC98847C540EFE6B8B1739F39A9725FD339D78A190000000028FE7C000000000070EC1B050000000022B9763F010000002A65404AB1FD7C26C0669FEA530126",
                Hex.toHexString(decryptedPacketData).toUpperCase());
    }

    /**
     * Works Client #000001 (0.1.1) C2L_LOGIN_REQ
     */
    @Test
    void decryptStream61Packet4() {
        String packetData = "ACCEtsCJbQvpj9CxWhGahqFyNNrsOlEOmueP578r4UC1bg==";
        String key = "UpJlo7MYHVbxS3Xs7LAx-sptfA5Q3Mw-";
        byte[] decryptedPacketData = CamelliaDecryptor.decryptPacketData(Base64.decode(packetData), key.getBytes(StandardCharsets.UTF_8));
        assertEquals("0000010100000000010014386A667671716C75796130346B34386B3430346301",
                Hex.toHexString(decryptedPacketData).toUpperCase());
    }
}